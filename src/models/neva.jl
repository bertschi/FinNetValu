import Base.show

"""
    NEVAModel(name, N, L·µâ, L, ùïç·µâ, ùïç, E‚ÇÄ, dbneg)

Financial network model with `name`, `N` firms, external `L·µâ` and
internal liabilities `L`. Values of external assets and liabilities of
counterparties are adjusted by the valuation functions `ùïç·µâ` and `ùïç`
respectively. The initial equity is computed via `E‚ÇÄ` and debt
repayment on negative equity via `dbneg`.
"""
struct NEVAModel <: DefaultModel
    name
    N
    A
    l
    ùïç·µâ
    ùïç
    E‚ÇÄ
    dbneg
    
    """
        NEVAModel(name, N, L·µâ, L, ùïç·µâ, ùïç, E‚ÇÄ, dbneg)

    Construct NEVA model with `name`, `N` firms, external `L·µâ` and
    internal liabilities `L`. Values of external assets and
    liabilities of counterparties are adjusted by the valuation
    functions `ùïç·µâ` and `ùïç` respectively. The initial equity is
    computed via `E‚ÇÄ` and debt repayment on negative equity via
    `dbneg`.
    """
    function NEVAModel(name::String, N::Integer, L·µâ, L, ùïç·µâ::Function, ùïç::Function, E‚ÇÄ::Function, dbneg::Function)
        @assert all(L·µâ .>= 0)
        @assert all(L .>= 0)
        A = copy(L')
        l = rowsums(L) .+ L·µâ
        new(name, N, A, l, ùïç·µâ, ùïç, E‚ÇÄ, dbneg)
    end
end

function show(io::IO, net::NEVAModel)
    print(io, net.name, " model with N = ", numfirms(net), " firms.")
end

############################
# Convenience constructors #
############################

function NEVAModel(name::String, L·µâ::AbstractVector, L, ùïç·µâ::Function, ùïç::Function, E‚ÇÄ::Function, dbneg::Function)
    NEVAModel(name, length(L·µâ), L·µâ, L, ùïç·µâ, ùïç, E‚ÇÄ, dbneg)
end

function NEVAModel(name::String, L·µâ, L::AbstractMatrix, ùïç·µâ::Function, ùïç::Function, E‚ÇÄ::Function, dbneg::Function)
    @assert size(L, 1) == size(L, 2)
    NEVAModel(name, size(L, 1), L·µâ, L, ùïç·µâ, ùïç, E‚ÇÄ, dbneg)
end

function NEVAModel(name::String, L·µâ::AbstractVector, L::AbstractMatrix, ùïç·µâ::Function, ùïç::Function, E‚ÇÄ::Function, dbneg::Function)
    @assert length(L·µâ) == size(L, 1) == size(L, 2)
    NEVAModel(name, length(L·µâ), L·µâ, L, ùïç·µâ, ùïç, E‚ÇÄ, dbneg)
end

##############################################
# Implementation of FinancialModel interface #
##############################################

numfirms(net::NEVAModel) = net.N

nominaldebt(net::NEVAModel) = net.l

function valuation!(y::AbstractVector, net::NEVAModel, x::AbstractVector, a::AbstractVector)
    y .= a .* net.ùïç·µâ(net, x, a) .+ rowsums(net.A .* net.ùïç(net, x, a)) .- net.l
end

function valuation(net::NEVAModel, x::AbstractVector, a::AbstractVector)
    a .* net.ùïç·µâ(net, x, a) .+ rowsums(net.A .* net.ùïç(net, x, a)) .- net.l
end

function solvent(net::NEVAModel, x::AbstractVector)
    x .>= zero(eltype(x))
end

function init(sol::NLSolver, net::NEVAModel, a::AbstractVector)
    net.E‚ÇÄ(net, a)
end

function init(sol::PicardIteration, net::NEVAModel, a::AbstractVector)
    net.E‚ÇÄ(net, a)
end

bookequity(net::NEVAModel, a::AbstractVector) = a .+ rowsums(net.A) .- net.l

function debtequity(net::NEVAModel, e::AbstractVector, a::AbstractVector)
    Œæ = solvent(net, e)
    pÃÑ = nominaldebt(net)
    equity = Œæ .* e
    debt = Œæ .* pÃÑ .+ (1 .- Œæ) .* net.dbneg.(e, a, pÃÑ)
    DefaultModelState(equity, debt)
end

##########################################
# Constructors for different models from #
# arxiv:1606.05164                       #
##########################################

valueEN(e::Real, pÃÑ::Real) = if (e > 0) 1. else max((e + pÃÑ) / pÃÑ, 0.) end

"""
    EisenbergNoeModel(L·µâ, L)

Creates an instance of the NEVAModel with valuation functions

```math
\\begin{align}
\\mathbb{V}^e_i(E_i) &= 1 \\quad \\forall i \\\\
\\mathbb{V}_{ij}(E_j) &= \\unicode{x1D7D9}_{E_j \\geq 0} + \\left(\\frac{E_j + \\bar{p}_j}{\\bar{p}_j}\\right)^+ \\unicode{x1D7D9}_{E_j < 0} \\quad \\forall i, j
\\end{align}
```

where ``\\bar{p}_j = \\sum_k L_{jk} + L^e_j``.

This valuation was shown to correspond to the model by Eisenberg & Noe.
"""
function EisenbergNoeModel(L·µâ::AbstractVector, L::AbstractMatrix)
    pÃÑ = rowsums(L) .+ L·µâ
    function val(net, e, a)
        # Note: rowvector gets broadcasted correctly as ùïç(E‚±º)
        transpose(valueEN.(e, pÃÑ))
    end
    NEVAModel("Eisenberg & Noe",
              L·µâ,
              L,
              constantly(one(eltype(L))),
              val,
              bookequity,
              (e, a, pÃÑ) -> max(e + pÃÑ, 0.))
end


function valueRV(e::Real, a::Real, pÃÑ::Real, Œ±::Real, Œ≤::Real)
    if (e > 0)
        1.
    else
        (Œ± - Œ≤) * a / pÃÑ + Œ≤ * max((e + pÃÑ) / pÃÑ, 0.)
    end
end

"""
    RogersVeraartModel(L·µâ, L, Œ±, Œ≤)

Creates an instance of the NEVAModel with valuation functions

```math
\\begin{align}
\\mathbb{V}^e_i(E_i) &= 1 \\quad \\forall i \\\\
\\mathbb{V}_{ij}(E_j) &= \\unicode{x1D7D9}_{E_j \\geq 0} + \\left((\\alpha - \\beta) \\frac{A_j}{\\bar{p}_j} + \\beta \\left(\\frac{E_j + \\bar{p}_j}{\\bar{p}_j}\\right)^+\\right) \\unicode{x1D7D9}_{E_j < 0} \\quad \\forall i, j
\\end{align}
```

where ``\\bar{p}_j = \\sum_k L_{jk} + L^e_j``.

This valuation was shown to correspond to the model by Rogers & Veraart.
"""
function RogersVeraartModel(L·µâ::AbstractVector, L::AbstractMatrix, Œ±::Real, Œ≤::Real)
    pÃÑ = rowsums(L) .+ L·µâ
    function val(net, e, a)
        transpose(valueRV.(e, a, pÃÑ, Œ±, Œ≤))
    end
    NEVAModel("Rogers & Veraart",
              L·µâ,
              L,
              constantly(one(eltype(L))),
              val,
              bookequity,
              (e, a, pÃÑ) -> (Œ± - Œ≤) * a + Œ≤ * max(e + pÃÑ, 0.))
end


valueFurfine(e::Real, R::Real) = if (e > 0) 1. else R end

"""
    FurfineModel(L·µâ, L, R)

Creates an instance of the NEVAModel with valuation functions

```math
\\begin{align}
\\mathbb{V}^e_i(E_i) &= 1 \\quad \\forall i \\\\
\\mathbb{V}_{ij}(E_j) &= \\unicode{x1D7D9}_{E_j \\geq 0} + R \\unicode{x1D7D9}_{E_j < 0} \\quad \\forall i, j
\\end{align}
```
with recovery `R`.

This valuation was shown to correspond to the model by Furfine.
"""
function FurfineModel(L·µâ::AbstractVector, L::AbstractMatrix, R::Real)
    @assert 0 <= R <= 1
    function val(net, e, a)
        transpose(valueFurfine.(e, R))
    end
    NEVAModel("Furfine",
              L·µâ,
              L,
              constantly(one(eltype(L))),
              val,
              bookequity,
              (e, a, pÃÑ) -> R * pÃÑ)
end


valueLR(e::Real, ebook::Real) = if (e > ebook) 1. elseif (e > 0) e / ebook else 0. end

"""
    LinearDebtRankModel(L·µâ, L, M)

Creates an instance of the NEVAModel with valuation functions

```math
\\begin{align}
\\mathbb{V}^e_i(E_i) &= 1 \\quad \\forall i \\\\
\\mathbb{V}_{ij}(E_j) &= \\frac{E_j^+}{M_j} \\quad \\forall i, j
\\end{align}
```
where the bookequities are externally fixed as `M`.

This valuation was shown to correspond to the linear DebtRank model.
"""
function LinearDebtRankModel(L·µâ::AbstractVector, L::AbstractMatrix, M::AbstractVector)
    function val(net, e, a)
        transpose(valueLR.(e, M))
    end
    NEVAModel("Linear Debt Rank",
              L·µâ,
              L,
              constantly(one(eltype(L))),
              val,
              constantly(M),
              (e, a, pÃÑ) -> @error "Not implemented!")
end

"""
    ExAnteEN_BS_Model(L·µâ, L, Œ≤, Œ∏)

Creates an instance of the NEVAModel with valuation functions

```math
\\begin{align}
\\mathbb{V}^e_i(E_i) &= 1 \\quad \\forall i \\\\
\\mathbb{V}_{ij}(E_j) &= 1 - p_j^D(E_j) + Œ≤ œÅ_j(E_j) \\quad \\forall i, j
\\end{align}
```
where ``p_j^D(E_j)`` and ``œÅ_j(E_j)`` denote the risk neutral probability
of default and endogenous recovery respectively.

This valuation can be considered as a ex-ante version of the Eisenberg & Noe model.
"""
function ExAnteEN_BS_Model(L·µâ::AbstractVector, L::AbstractMatrix, Œ≤::Real, Œ∏::BlackScholesParams)
    pbar = vec(sum(L; dims = 2))
    function val(net, e, a)
        K = a .- e
        function fun(K, a, pbar, Œ≤)
            if (K <= 0)
                1.0
            else
                # Compute probability of default
                pd = putdualŒî(a, K, Œ∏)
                # Compute expected shortfall when defaulted
                es1 = putprice(a, K, Œ∏)
                # and again shifted
                es2 = if ((K - pbar) <= 0) 0.0 else putprice(a, K - pbar, Œ∏) end
                # TODO: Document this way of writing everything in put prices!
                (1 - pd) + Œ≤ / pbar * ((pd * pbar - es1) + es2)
            end
        end
        # Note: rowvector gets broadcasted correctly as ùïç(E‚±º)
        transpose(fun.(K, a, pbar, Œ≤))
    end
    NEVAModel("Ex-ante Eisenberg & Noe (Black-Scholes)",
              L·µâ,
              L,
              constantly(one(eltype(L))),
              val,
              bookequity,
              (e, a, pÃÑ) -> @error "Not implemented!")
end
